// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_expense_tracker/test/setup/test_widget_wrapper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_expense_tracker/models/transaction.dart' as _i3;
import 'package:flutter_expense_tracker/repositories/transactino_http_repository.dart'
    as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_1 extends _i1.SmartFake implements _i3.Transaction {
  _FakeTransaction_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionHttpRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionHttpRepository extends _i1.Mock
    implements _i4.TransactionHttpRepository {
  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i5.Future<_i3.Transaction> addTransction(_i3.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransction,
          [transaction],
        ),
        returnValue: _i5.Future<_i3.Transaction>.value(_FakeTransaction_1(
          this,
          Invocation.method(
            #addTransction,
            [transaction],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Transaction>.value(_FakeTransaction_1(
          this,
          Invocation.method(
            #addTransction,
            [transaction],
          ),
        )),
      ) as _i5.Future<_i3.Transaction>);
  @override
  _i5.Future<void> deleteTransaction(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i3.Transaction>> getTransactions() => (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [],
        ),
        returnValue:
            _i5.Future<List<_i3.Transaction>>.value(<_i3.Transaction>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Transaction>>.value(<_i3.Transaction>[]),
      ) as _i5.Future<List<_i3.Transaction>>);
}
